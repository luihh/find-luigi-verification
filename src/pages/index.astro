---
import Layout from '../layouts/Layout.astro';

export const prerender = true;
---

<style is:inline>
  body {
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background-color: #000000;
    font-family: Arial, sans-serif;
  }

  #game-container {
    position: relative;
    width: 50vw;
    height: 60vh;
    border: 2px solid #fff;
    overflow: hidden;
  }

  .character {
    position: absolute;
    width: 50px;
    height: 50px;
    background-size: contain;
    background-repeat: no-repeat;
    cursor: pointer;
    z-index: 10;
  }

  #message {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(255, 255, 255, 0.8);
    padding: 10px 20px;
    border: 2px solid #000;
    font-size: 18px;
    font-weight: bold;
    z-index: 10;
  }
</style>

<Layout>
  <audio autoplay loop src="audio.ogg"></audio>
  <div id="message">Find Luigi!</div>
  <div id="game-container"></div>
</Layout>

<script>
  const urlSearchParams = new URLSearchParams(window.location.search);
  const params = Object.fromEntries(urlSearchParams.entries());
  const userId = params.userId;

  const isVerified = document.cookie.includes('isVerified=true');

  const gameContainer = document.getElementById(
    'game-container',
  ) as HTMLElement;
  const message = document.getElementById('message') as HTMLElement;

  // Character configurations
  interface Character {
    name: string;
    image: string;
  }

  const characters: Character[] = [
    { name: 'Mario', image: 'mario.png' },
    { name: 'Yoshi', image: 'yoshi.png' },
    { name: 'Wario', image: 'wario.png' },
  ];

  const characterCount: number = 50;

  async function sendVerification(userId: string) {
    const response = await fetch('/api/verify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ userId }),
    });

    if (response.ok) {
      document.cookie = 'isVerified=true; path=/; max-age=3600';

      message.textContent =
        'Verification successful! You can return to Discord.';
      message.style.backgroundColor = 'limegreen';
    } else {
      message.textContent = 'Verification failed. Please try again.';
      message.style.backgroundColor = 'red';
    }
  }

  function getRandomPosition(): { x: number; y: number } {
    const x = Math.random() * (gameContainer.clientWidth - 50);
    const y = Math.random() * (gameContainer.clientHeight - 60);
    return { x, y };
  }

  function createCharacter(
    name: string,
    image: string,
    isLuigi: boolean,
  ): HTMLElement {
    const charDiv = document.createElement('div');
    charDiv.className = 'character';
    charDiv.style.backgroundImage = `url(${image})`;
    const { x, y } = getRandomPosition();
    charDiv.style.left = `${x}px`;
    charDiv.style.top = `${y}px`;

    const direction = {
      dx: Math.random() < 0.5 ? 1 : -1,
      dy: Math.random() < 0.5 ? 1 : -1,
    };

    charDiv.dataset.direction = JSON.stringify(direction);

    function onLuigiFound() {
      message.textContent = 'You found Luigi!';
      message.style.backgroundColor = 'limegreen';

      const audio = new Audio('ooh.wav');
      audio.play();

      charDiv.removeEventListener('click', onLuigiFound);

      if (userId && !isVerified) {
        sendVerification(userId);
      } else {
        setTimeout(() => location.reload(), 2000);
      }
    }

    if (isLuigi) {
      charDiv.dataset.speed = '1'; // Luigi moves slower
      charDiv.addEventListener('click', onLuigiFound);
    } else {
      charDiv.dataset.speed = (Math.random() * 2 + 1).toString(); // Random speed for other characters
      charDiv.addEventListener('click', () => {
        message.textContent = 'Wrong character! Keep looking!';
        message.style.backgroundColor = 'red';
        setTimeout(() => {
          message.textContent = 'Find Luigi!';
          message.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
        }, 1000);
      });
    }

    return charDiv;
  }

  function moveCharacters(): void {
    const characters = document.querySelectorAll('.character');
    characters.forEach((charEl: Element) => {
      const char = charEl as HTMLElement;
      const speed = parseFloat(char.dataset.speed ?? '1');
      const direction = JSON.parse(char.dataset.direction ?? '{}');

      let x = parseFloat(char.style.left);
      let y = parseFloat(char.style.top);

      x += direction.dx * speed;
      y += direction.dy * speed;

      // Check for collisions with container bounds
      if (x <= 0 || x >= gameContainer.clientWidth - 50) {
        direction.dx *= -1; // Reverse X direction
      }

      if (y <= 0 || y >= gameContainer.clientHeight - 60) {
        direction.dy *= -1; // Reverse Y direction
      }

      // Update position and direction
      x = Math.max(0, Math.min(gameContainer.clientWidth - 50, x));
      y = Math.max(0, Math.min(gameContainer.clientHeight - 60, y));

      char.style.left = `${x}px`;
      char.style.top = `${y}px`;
      char.dataset.direction = JSON.stringify(direction);
    });

    requestAnimationFrame(moveCharacters);
  }

  function populateCharacters(): void {
    const luigiIndex = Math.floor(Math.random() * characterCount);

    for (let i = 0; i < characterCount; i++) {
      if (i === luigiIndex) {
        const luigi = createCharacter('Luigi', 'luigi.png', true);
        gameContainer.appendChild(luigi);
      } else {
        const randomCharacter =
          characters[Math.floor(Math.random() * characters.length)];
        const char = createCharacter(
          randomCharacter.name,
          randomCharacter.image,
          false,
        );
        gameContainer.appendChild(char);
      }
    }
  }

  populateCharacters();
  moveCharacters();
</script>
